// var number = Number(document.getElementById("num").value);
var answer = document.getElementById("answer");
var number = document.getElementById("num");


function multiply() {
    console.clear();
    number = Number(number.value);
    for(var i = 1; i <= 10; i++ ) {
        console.log(number + " x " + i + " = " + number * i);
        var ans = number + " x " + i + " = " + number * i; 
        answer.innerHTML = answer.innerHTML + "<br>" + ans ;
    }
    number = document.getElementById("num");
}



// *. Для всех
// 1. Таблица умножения. Программа получает число в диапазоне от 2 до 9
// и выводит на консоль таблицу умножения на это число. Пример на картинке 
// mult_table_example.PNG.
// Challenge: Выведите эту таблицу на страницу html (напр. по строчкам 
// в специальный <div> или <p>)

//выравниваю горизонтально justify-content:
// flex-start: Элементы выравниваются по левой стороне контейнера.
// flex-end: Элементы выравниваются по правой стороне контейнера.
// center: Элементы выравниваются по центру контейнера.
// space-between: Элементы отображаются с одинаковыми отступами между ними.
// space-around: Элементы отображаются с одинаковыми отступами вокруг них.

// align-items - это CSS свойство выравнивает элементы вертикально и принимает следующие значения:
// flex-start: Элементы выравниваются по верхнему краю контейнера.
// flex-end: Элементы выравниваются по нижнему краю контейнера.
// center: Элементы выравниваются вертикально по центру контейнера.
// baseline: Элементы отображаются на базовой линии контейнера.
// stretch: Элементы растягиваются, чтоб заполнить контейнер.

// flex-direction это CSS свойство задает направление, в котором будут расположены элементы в контейнере:
// row: элементы размещаются по направлению текста.
// row-reverse: элементы отображаются в обратном порядке к направлению текста.
// column: элементы располагаются сверху вниз.
// column-reverse: элементы располагаются снизу вверх.

//order - порядок flex элементов.